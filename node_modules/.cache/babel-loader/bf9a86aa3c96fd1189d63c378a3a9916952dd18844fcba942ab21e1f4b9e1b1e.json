{"ast":null,"code":"// Enhanced plant data with multi-sensor support\nexport const mockPlants = [{\n  id: 1,\n  name: \"Monstera\",\n  species: \"Monstera deliciosa\",\n  location: \"Living Room\",\n  lastWatered: \"2025-08-20T14:30:00Z\",\n  optimalMoisture: {\n    min: 40,\n    max: 70\n  },\n  optimalTemperature: {\n    min: 18,\n    max: 27\n  },\n  sensorData: {\n    moisture: {\n      value: 45,\n      sensorId: 1,\n      lastReading: \"2025-08-22T10:30:00Z\"\n    },\n    temperature: {\n      value: 22.3,\n      sensorId: 4,\n      lastReading: \"2025-08-22T10:30:00Z\"\n    },\n    humidity: {\n      value: 65,\n      sensorId: 4,\n      lastReading: \"2025-08-22T10:30:00Z\"\n    },\n    pumpStatus: {\n      value: false,\n      sensorId: 1,\n      lastReading: \"2025-08-22T10:30:00Z\"\n    }\n  },\n  plantedDate: \"2024-03-15\",\n  notes: \"Thriving in indirect light, watered weekly\"\n}, {\n  id: 2,\n  name: \"Aloe Vera\",\n  species: \"Aloe barbadensis\",\n  location: \"Kitchen\",\n  lastWatered: \"2025-08-21T08:15:00Z\",\n  optimalMoisture: {\n    min: 30,\n    max: 50\n  },\n  optimalTemperature: {\n    min: 16,\n    max: 24\n  },\n  sensorData: {\n    moisture: {\n      value: 68,\n      sensorId: 2,\n      lastReading: \"2025-08-22T10:29:00Z\"\n    },\n    temperature: {\n      value: 24.1,\n      sensorId: 4,\n      lastReading: \"2025-08-22T10:30:00Z\"\n    },\n    humidity: {\n      value: 65,\n      sensorId: 4,\n      lastReading: \"2025-08-22T10:30:00Z\"\n    },\n    pumpStatus: {\n      value: true,\n      sensorId: 2,\n      lastReading: \"2025-08-22T10:29:00Z\"\n    }\n  },\n  plantedDate: \"2024-01-10\",\n  notes: \"Needs well-draining soil, minimal watering\"\n}, {\n  id: 3,\n  name: \"Snake Plant\",\n  species: \"Sansevieria trifasciata\",\n  location: \"Bedroom\",\n  lastWatered: \"2025-08-19T16:45:00Z\",\n  optimalMoisture: {\n    min: 25,\n    max: 45\n  },\n  optimalTemperature: {\n    min: 15,\n    max: 24\n  },\n  sensorData: {\n    moisture: {\n      value: 32,\n      sensorId: 3,\n      lastReading: \"2025-08-21T18:45:00Z\"\n    },\n    temperature: {\n      value: 21.8,\n      sensorId: 4,\n      lastReading: \"2025-08-22T10:30:00Z\"\n    },\n    humidity: {\n      value: 65,\n      sensorId: 4,\n      lastReading: \"2025-08-22T10:30:00Z\"\n    },\n    pumpStatus: {\n      value: false,\n      sensorId: 3,\n      lastReading: \"2025-08-21T18:45:00Z\"\n    }\n  },\n  plantedDate: \"2024-05-20\",\n  notes: \"Very drought tolerant, prefers neglect\"\n}, {\n  id: 4,\n  name: \"Fiddle Leaf Fig\",\n  species: \"Ficus lyrata\",\n  location: \"Office\",\n  lastWatered: \"2025-08-20T11:20:00Z\",\n  optimalMoisture: {\n    min: 50,\n    max: 75\n  },\n  optimalTemperature: {\n    min: 18,\n    max: 26\n  },\n  sensorData: {\n    temperature: {\n      value: 23.5,\n      sensorId: 4,\n      lastReading: \"2025-08-22T10:30:00Z\"\n    },\n    humidity: {\n      value: 65,\n      sensorId: 4,\n      lastReading: \"2025-08-22T10:30:00Z\"\n    }\n  },\n  plantedDate: \"2024-02-28\",\n  notes: \"No dedicated watering sensor yet - needs manual monitoring\"\n}];\n\n// Helper functions for plant sensor data\nexport const getPlantSensorValue = (plant, dataType) => {\n  var _plant$sensorData, _plant$sensorData$dat;\n  return ((_plant$sensorData = plant.sensorData) === null || _plant$sensorData === void 0 ? void 0 : (_plant$sensorData$dat = _plant$sensorData[dataType]) === null || _plant$sensorData$dat === void 0 ? void 0 : _plant$sensorData$dat.value) || null;\n};\nexport const getPlantSensorLastReading = (plant, dataType) => {\n  var _plant$sensorData2, _plant$sensorData2$da;\n  return ((_plant$sensorData2 = plant.sensorData) === null || _plant$sensorData2 === void 0 ? void 0 : (_plant$sensorData2$da = _plant$sensorData2[dataType]) === null || _plant$sensorData2$da === void 0 ? void 0 : _plant$sensorData2$da.lastReading) || null;\n};\nexport const getPlantSensorId = (plant, dataType) => {\n  var _plant$sensorData3, _plant$sensorData3$da;\n  return ((_plant$sensorData3 = plant.sensorData) === null || _plant$sensorData3 === void 0 ? void 0 : (_plant$sensorData3$da = _plant$sensorData3[dataType]) === null || _plant$sensorData3$da === void 0 ? void 0 : _plant$sensorData3$da.sensorId) || null;\n};\n\n// Backwards compatibility getters\nexport const getPlantMoisture = plant => getPlantSensorValue(plant, 'moisture');\nexport const getPlantTemperature = plant => getPlantSensorValue(plant, 'temperature');\nexport const getPlantPumpStatus = plant => getPlantSensorValue(plant, 'pumpStatus');\n\n// Generate realistic 24-hour chart data\nexport const generateChartData = plantId => {\n  const baseData = {\n    1: {\n      baseMoisture: 45,\n      baseTemp: 22\n    },\n    // Monstera\n    2: {\n      baseMoisture: 68,\n      baseTemp: 24\n    },\n    // Aloe Vera  \n    3: {\n      baseMoisture: 32,\n      baseTemp: 21\n    },\n    // Snake Plant\n    4: {\n      baseMoisture: 55,\n      baseTemp: 23\n    } // Fiddle Leaf Fig\n  };\n  const plant = baseData[plantId] || baseData[1];\n  const data = [];\n  for (let hour = 0; hour < 24; hour++) {\n    // Simulate moisture decrease over time with some randomness\n    const moistureVariation = Math.sin(hour * 0.3) * 8 + (Math.random() - 0.5) * 6;\n    const moisture = Math.max(15, Math.min(85, plant.baseMoisture + moistureVariation - hour * 0.8));\n\n    // Simulate temperature changes throughout the day\n    const tempVariation = Math.sin((hour - 6) * 0.26) * 4 + (Math.random() - 0.5) * 2;\n    const temperature = plant.baseTemp + tempVariation;\n    data.push({\n      time: `${hour.toString().padStart(2, '0')}:00`,\n      moisture: Math.round(moisture * 10) / 10,\n      temperature: Math.round(temperature * 10) / 10,\n      hour\n    });\n  }\n  return data;\n};\n\n// System overview stats\nexport const systemStats = {\n  totalPlants: mockPlants.length,\n  plantsNeedingWater: mockPlants.filter(p => {\n    const moisture = getPlantMoisture(p);\n    return moisture && moisture < p.optimalMoisture.min;\n  }).length,\n  activePumps: mockPlants.filter(p => getPlantPumpStatus(p)).length,\n  avgTemperature: (() => {\n    const plantsWithTemp = mockPlants.filter(p => getPlantTemperature(p) !== null);\n    if (plantsWithTemp.length === 0) return null;\n    const sum = plantsWithTemp.reduce((sum, p) => sum + getPlantTemperature(p), 0);\n    return Math.round(sum / plantsWithTemp.length * 10) / 10;\n  })(),\n  lastUpdated: new Date().toISOString()\n};","map":{"version":3,"names":["mockPlants","id","name","species","location","lastWatered","optimalMoisture","min","max","optimalTemperature","sensorData","moisture","value","sensorId","lastReading","temperature","humidity","pumpStatus","plantedDate","notes","getPlantSensorValue","plant","dataType","_plant$sensorData","_plant$sensorData$dat","getPlantSensorLastReading","_plant$sensorData2","_plant$sensorData2$da","getPlantSensorId","_plant$sensorData3","_plant$sensorData3$da","getPlantMoisture","getPlantTemperature","getPlantPumpStatus","generateChartData","plantId","baseData","baseMoisture","baseTemp","data","hour","moistureVariation","Math","sin","random","tempVariation","push","time","toString","padStart","round","systemStats","totalPlants","length","plantsNeedingWater","filter","p","activePumps","avgTemperature","plantsWithTemp","sum","reduce","lastUpdated","Date","toISOString"],"sources":["/home/natalie/Dokumente/Projects/eco-garden/src/data/mockData.js"],"sourcesContent":["// Enhanced plant data with multi-sensor support\nexport const mockPlants = [\n  {\n    id: 1,\n    name: \"Monstera\",\n    species: \"Monstera deliciosa\",\n    location: \"Living Room\",\n    lastWatered: \"2025-08-20T14:30:00Z\",\n    optimalMoisture: { min: 40, max: 70 },\n    optimalTemperature: { min: 18, max: 27 },\n    sensorData: {\n      moisture: { value: 45, sensorId: 1, lastReading: \"2025-08-22T10:30:00Z\" },\n      temperature: { value: 22.3, sensorId: 4, lastReading: \"2025-08-22T10:30:00Z\" },\n      humidity: { value: 65, sensorId: 4, lastReading: \"2025-08-22T10:30:00Z\" },\n      pumpStatus: { value: false, sensorId: 1, lastReading: \"2025-08-22T10:30:00Z\" }\n    },\n    plantedDate: \"2024-03-15\",\n    notes: \"Thriving in indirect light, watered weekly\"\n  },\n  {\n    id: 2, \n    name: \"Aloe Vera\",\n    species: \"Aloe barbadensis\",\n    location: \"Kitchen\",\n    lastWatered: \"2025-08-21T08:15:00Z\",\n    optimalMoisture: { min: 30, max: 50 },\n    optimalTemperature: { min: 16, max: 24 },\n    sensorData: {\n      moisture: { value: 68, sensorId: 2, lastReading: \"2025-08-22T10:29:00Z\" },\n      temperature: { value: 24.1, sensorId: 4, lastReading: \"2025-08-22T10:30:00Z\" },\n      humidity: { value: 65, sensorId: 4, lastReading: \"2025-08-22T10:30:00Z\" },\n      pumpStatus: { value: true, sensorId: 2, lastReading: \"2025-08-22T10:29:00Z\" }\n    },\n    plantedDate: \"2024-01-10\",\n    notes: \"Needs well-draining soil, minimal watering\"\n  },\n  {\n    id: 3,\n    name: \"Snake Plant\",\n    species: \"Sansevieria trifasciata\",\n    location: \"Bedroom\", \n    lastWatered: \"2025-08-19T16:45:00Z\",\n    optimalMoisture: { min: 25, max: 45 },\n    optimalTemperature: { min: 15, max: 24 },\n    sensorData: {\n      moisture: { value: 32, sensorId: 3, lastReading: \"2025-08-21T18:45:00Z\" },\n      temperature: { value: 21.8, sensorId: 4, lastReading: \"2025-08-22T10:30:00Z\" },\n      humidity: { value: 65, sensorId: 4, lastReading: \"2025-08-22T10:30:00Z\" },\n      pumpStatus: { value: false, sensorId: 3, lastReading: \"2025-08-21T18:45:00Z\" }\n    },\n    plantedDate: \"2024-05-20\",\n    notes: \"Very drought tolerant, prefers neglect\"\n  },\n  {\n    id: 4,\n    name: \"Fiddle Leaf Fig\",\n    species: \"Ficus lyrata\",\n    location: \"Office\",\n    lastWatered: \"2025-08-20T11:20:00Z\",\n    optimalMoisture: { min: 50, max: 75 },\n    optimalTemperature: { min: 18, max: 26 },\n    sensorData: {\n      temperature: { value: 23.5, sensorId: 4, lastReading: \"2025-08-22T10:30:00Z\" },\n      humidity: { value: 65, sensorId: 4, lastReading: \"2025-08-22T10:30:00Z\" }\n    },\n    plantedDate: \"2024-02-28\",\n    notes: \"No dedicated watering sensor yet - needs manual monitoring\"\n  }\n];\n\n// Helper functions for plant sensor data\nexport const getPlantSensorValue = (plant, dataType) => {\n  return plant.sensorData?.[dataType]?.value || null;\n};\n\nexport const getPlantSensorLastReading = (plant, dataType) => {\n  return plant.sensorData?.[dataType]?.lastReading || null;\n};\n\nexport const getPlantSensorId = (plant, dataType) => {\n  return plant.sensorData?.[dataType]?.sensorId || null;\n};\n\n// Backwards compatibility getters\nexport const getPlantMoisture = (plant) => getPlantSensorValue(plant, 'moisture');\nexport const getPlantTemperature = (plant) => getPlantSensorValue(plant, 'temperature');\nexport const getPlantPumpStatus = (plant) => getPlantSensorValue(plant, 'pumpStatus');\n\n// Generate realistic 24-hour chart data\nexport const generateChartData = (plantId) => {\n  const baseData = {\n    1: { baseMoisture: 45, baseTemp: 22 }, // Monstera\n    2: { baseMoisture: 68, baseTemp: 24 }, // Aloe Vera  \n    3: { baseMoisture: 32, baseTemp: 21 }, // Snake Plant\n    4: { baseMoisture: 55, baseTemp: 23 }  // Fiddle Leaf Fig\n  };\n\n  const plant = baseData[plantId] || baseData[1];\n  const data = [];\n  \n  for (let hour = 0; hour < 24; hour++) {\n    // Simulate moisture decrease over time with some randomness\n    const moistureVariation = Math.sin(hour * 0.3) * 8 + (Math.random() - 0.5) * 6;\n    const moisture = Math.max(15, Math.min(85, plant.baseMoisture + moistureVariation - (hour * 0.8)));\n    \n    // Simulate temperature changes throughout the day\n    const tempVariation = Math.sin((hour - 6) * 0.26) * 4 + (Math.random() - 0.5) * 2;\n    const temperature = plant.baseTemp + tempVariation;\n    \n    data.push({\n      time: `${hour.toString().padStart(2, '0')}:00`,\n      moisture: Math.round(moisture * 10) / 10,\n      temperature: Math.round(temperature * 10) / 10,\n      hour\n    });\n  }\n  \n  return data;\n};\n\n// System overview stats\nexport const systemStats = {\n  totalPlants: mockPlants.length,\n  plantsNeedingWater: mockPlants.filter(p => {\n    const moisture = getPlantMoisture(p);\n    return moisture && moisture < p.optimalMoisture.min;\n  }).length,\n  activePumps: mockPlants.filter(p => getPlantPumpStatus(p)).length,\n  avgTemperature: (() => {\n    const plantsWithTemp = mockPlants.filter(p => getPlantTemperature(p) !== null);\n    if (plantsWithTemp.length === 0) return null;\n    const sum = plantsWithTemp.reduce((sum, p) => sum + getPlantTemperature(p), 0);\n    return Math.round((sum / plantsWithTemp.length) * 10) / 10;\n  })(),\n  lastUpdated: new Date().toISOString()\n};"],"mappings":"AAAA;AACA,OAAO,MAAMA,UAAU,GAAG,CACxB;EACEC,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,UAAU;EAChBC,OAAO,EAAE,oBAAoB;EAC7BC,QAAQ,EAAE,aAAa;EACvBC,WAAW,EAAE,sBAAsB;EACnCC,eAAe,EAAE;IAAEC,GAAG,EAAE,EAAE;IAAEC,GAAG,EAAE;EAAG,CAAC;EACrCC,kBAAkB,EAAE;IAAEF,GAAG,EAAE,EAAE;IAAEC,GAAG,EAAE;EAAG,CAAC;EACxCE,UAAU,EAAE;IACVC,QAAQ,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,QAAQ,EAAE,CAAC;MAAEC,WAAW,EAAE;IAAuB,CAAC;IACzEC,WAAW,EAAE;MAAEH,KAAK,EAAE,IAAI;MAAEC,QAAQ,EAAE,CAAC;MAAEC,WAAW,EAAE;IAAuB,CAAC;IAC9EE,QAAQ,EAAE;MAAEJ,KAAK,EAAE,EAAE;MAAEC,QAAQ,EAAE,CAAC;MAAEC,WAAW,EAAE;IAAuB,CAAC;IACzEG,UAAU,EAAE;MAAEL,KAAK,EAAE,KAAK;MAAEC,QAAQ,EAAE,CAAC;MAAEC,WAAW,EAAE;IAAuB;EAC/E,CAAC;EACDI,WAAW,EAAE,YAAY;EACzBC,KAAK,EAAE;AACT,CAAC,EACD;EACElB,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,WAAW;EACjBC,OAAO,EAAE,kBAAkB;EAC3BC,QAAQ,EAAE,SAAS;EACnBC,WAAW,EAAE,sBAAsB;EACnCC,eAAe,EAAE;IAAEC,GAAG,EAAE,EAAE;IAAEC,GAAG,EAAE;EAAG,CAAC;EACrCC,kBAAkB,EAAE;IAAEF,GAAG,EAAE,EAAE;IAAEC,GAAG,EAAE;EAAG,CAAC;EACxCE,UAAU,EAAE;IACVC,QAAQ,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,QAAQ,EAAE,CAAC;MAAEC,WAAW,EAAE;IAAuB,CAAC;IACzEC,WAAW,EAAE;MAAEH,KAAK,EAAE,IAAI;MAAEC,QAAQ,EAAE,CAAC;MAAEC,WAAW,EAAE;IAAuB,CAAC;IAC9EE,QAAQ,EAAE;MAAEJ,KAAK,EAAE,EAAE;MAAEC,QAAQ,EAAE,CAAC;MAAEC,WAAW,EAAE;IAAuB,CAAC;IACzEG,UAAU,EAAE;MAAEL,KAAK,EAAE,IAAI;MAAEC,QAAQ,EAAE,CAAC;MAAEC,WAAW,EAAE;IAAuB;EAC9E,CAAC;EACDI,WAAW,EAAE,YAAY;EACzBC,KAAK,EAAE;AACT,CAAC,EACD;EACElB,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,aAAa;EACnBC,OAAO,EAAE,yBAAyB;EAClCC,QAAQ,EAAE,SAAS;EACnBC,WAAW,EAAE,sBAAsB;EACnCC,eAAe,EAAE;IAAEC,GAAG,EAAE,EAAE;IAAEC,GAAG,EAAE;EAAG,CAAC;EACrCC,kBAAkB,EAAE;IAAEF,GAAG,EAAE,EAAE;IAAEC,GAAG,EAAE;EAAG,CAAC;EACxCE,UAAU,EAAE;IACVC,QAAQ,EAAE;MAAEC,KAAK,EAAE,EAAE;MAAEC,QAAQ,EAAE,CAAC;MAAEC,WAAW,EAAE;IAAuB,CAAC;IACzEC,WAAW,EAAE;MAAEH,KAAK,EAAE,IAAI;MAAEC,QAAQ,EAAE,CAAC;MAAEC,WAAW,EAAE;IAAuB,CAAC;IAC9EE,QAAQ,EAAE;MAAEJ,KAAK,EAAE,EAAE;MAAEC,QAAQ,EAAE,CAAC;MAAEC,WAAW,EAAE;IAAuB,CAAC;IACzEG,UAAU,EAAE;MAAEL,KAAK,EAAE,KAAK;MAAEC,QAAQ,EAAE,CAAC;MAAEC,WAAW,EAAE;IAAuB;EAC/E,CAAC;EACDI,WAAW,EAAE,YAAY;EACzBC,KAAK,EAAE;AACT,CAAC,EACD;EACElB,EAAE,EAAE,CAAC;EACLC,IAAI,EAAE,iBAAiB;EACvBC,OAAO,EAAE,cAAc;EACvBC,QAAQ,EAAE,QAAQ;EAClBC,WAAW,EAAE,sBAAsB;EACnCC,eAAe,EAAE;IAAEC,GAAG,EAAE,EAAE;IAAEC,GAAG,EAAE;EAAG,CAAC;EACrCC,kBAAkB,EAAE;IAAEF,GAAG,EAAE,EAAE;IAAEC,GAAG,EAAE;EAAG,CAAC;EACxCE,UAAU,EAAE;IACVK,WAAW,EAAE;MAAEH,KAAK,EAAE,IAAI;MAAEC,QAAQ,EAAE,CAAC;MAAEC,WAAW,EAAE;IAAuB,CAAC;IAC9EE,QAAQ,EAAE;MAAEJ,KAAK,EAAE,EAAE;MAAEC,QAAQ,EAAE,CAAC;MAAEC,WAAW,EAAE;IAAuB;EAC1E,CAAC;EACDI,WAAW,EAAE,YAAY;EACzBC,KAAK,EAAE;AACT,CAAC,CACF;;AAED;AACA,OAAO,MAAMC,mBAAmB,GAAGA,CAACC,KAAK,EAAEC,QAAQ,KAAK;EAAA,IAAAC,iBAAA,EAAAC,qBAAA;EACtD,OAAO,EAAAD,iBAAA,GAAAF,KAAK,CAACX,UAAU,cAAAa,iBAAA,wBAAAC,qBAAA,GAAhBD,iBAAA,CAAmBD,QAAQ,CAAC,cAAAE,qBAAA,uBAA5BA,qBAAA,CAA8BZ,KAAK,KAAI,IAAI;AACpD,CAAC;AAED,OAAO,MAAMa,yBAAyB,GAAGA,CAACJ,KAAK,EAAEC,QAAQ,KAAK;EAAA,IAAAI,kBAAA,EAAAC,qBAAA;EAC5D,OAAO,EAAAD,kBAAA,GAAAL,KAAK,CAACX,UAAU,cAAAgB,kBAAA,wBAAAC,qBAAA,GAAhBD,kBAAA,CAAmBJ,QAAQ,CAAC,cAAAK,qBAAA,uBAA5BA,qBAAA,CAA8Bb,WAAW,KAAI,IAAI;AAC1D,CAAC;AAED,OAAO,MAAMc,gBAAgB,GAAGA,CAACP,KAAK,EAAEC,QAAQ,KAAK;EAAA,IAAAO,kBAAA,EAAAC,qBAAA;EACnD,OAAO,EAAAD,kBAAA,GAAAR,KAAK,CAACX,UAAU,cAAAmB,kBAAA,wBAAAC,qBAAA,GAAhBD,kBAAA,CAAmBP,QAAQ,CAAC,cAAAQ,qBAAA,uBAA5BA,qBAAA,CAA8BjB,QAAQ,KAAI,IAAI;AACvD,CAAC;;AAED;AACA,OAAO,MAAMkB,gBAAgB,GAAIV,KAAK,IAAKD,mBAAmB,CAACC,KAAK,EAAE,UAAU,CAAC;AACjF,OAAO,MAAMW,mBAAmB,GAAIX,KAAK,IAAKD,mBAAmB,CAACC,KAAK,EAAE,aAAa,CAAC;AACvF,OAAO,MAAMY,kBAAkB,GAAIZ,KAAK,IAAKD,mBAAmB,CAACC,KAAK,EAAE,YAAY,CAAC;;AAErF;AACA,OAAO,MAAMa,iBAAiB,GAAIC,OAAO,IAAK;EAC5C,MAAMC,QAAQ,GAAG;IACf,CAAC,EAAE;MAAEC,YAAY,EAAE,EAAE;MAAEC,QAAQ,EAAE;IAAG,CAAC;IAAE;IACvC,CAAC,EAAE;MAAED,YAAY,EAAE,EAAE;MAAEC,QAAQ,EAAE;IAAG,CAAC;IAAE;IACvC,CAAC,EAAE;MAAED,YAAY,EAAE,EAAE;MAAEC,QAAQ,EAAE;IAAG,CAAC;IAAE;IACvC,CAAC,EAAE;MAAED,YAAY,EAAE,EAAE;MAAEC,QAAQ,EAAE;IAAG,CAAC,CAAE;EACzC,CAAC;EAED,MAAMjB,KAAK,GAAGe,QAAQ,CAACD,OAAO,CAAC,IAAIC,QAAQ,CAAC,CAAC,CAAC;EAC9C,MAAMG,IAAI,GAAG,EAAE;EAEf,KAAK,IAAIC,IAAI,GAAG,CAAC,EAAEA,IAAI,GAAG,EAAE,EAAEA,IAAI,EAAE,EAAE;IACpC;IACA,MAAMC,iBAAiB,GAAGC,IAAI,CAACC,GAAG,CAACH,IAAI,GAAG,GAAG,CAAC,GAAG,CAAC,GAAG,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;IAC9E,MAAMjC,QAAQ,GAAG+B,IAAI,CAAClC,GAAG,CAAC,EAAE,EAAEkC,IAAI,CAACnC,GAAG,CAAC,EAAE,EAAEc,KAAK,CAACgB,YAAY,GAAGI,iBAAiB,GAAID,IAAI,GAAG,GAAI,CAAC,CAAC;;IAElG;IACA,MAAMK,aAAa,GAAGH,IAAI,CAACC,GAAG,CAAC,CAACH,IAAI,GAAG,CAAC,IAAI,IAAI,CAAC,GAAG,CAAC,GAAG,CAACE,IAAI,CAACE,MAAM,CAAC,CAAC,GAAG,GAAG,IAAI,CAAC;IACjF,MAAM7B,WAAW,GAAGM,KAAK,CAACiB,QAAQ,GAAGO,aAAa;IAElDN,IAAI,CAACO,IAAI,CAAC;MACRC,IAAI,EAAE,GAAGP,IAAI,CAACQ,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,KAAK;MAC9CtC,QAAQ,EAAE+B,IAAI,CAACQ,KAAK,CAACvC,QAAQ,GAAG,EAAE,CAAC,GAAG,EAAE;MACxCI,WAAW,EAAE2B,IAAI,CAACQ,KAAK,CAACnC,WAAW,GAAG,EAAE,CAAC,GAAG,EAAE;MAC9CyB;IACF,CAAC,CAAC;EACJ;EAEA,OAAOD,IAAI;AACb,CAAC;;AAED;AACA,OAAO,MAAMY,WAAW,GAAG;EACzBC,WAAW,EAAEpD,UAAU,CAACqD,MAAM;EAC9BC,kBAAkB,EAAEtD,UAAU,CAACuD,MAAM,CAACC,CAAC,IAAI;IACzC,MAAM7C,QAAQ,GAAGoB,gBAAgB,CAACyB,CAAC,CAAC;IACpC,OAAO7C,QAAQ,IAAIA,QAAQ,GAAG6C,CAAC,CAAClD,eAAe,CAACC,GAAG;EACrD,CAAC,CAAC,CAAC8C,MAAM;EACTI,WAAW,EAAEzD,UAAU,CAACuD,MAAM,CAACC,CAAC,IAAIvB,kBAAkB,CAACuB,CAAC,CAAC,CAAC,CAACH,MAAM;EACjEK,cAAc,EAAE,CAAC,MAAM;IACrB,MAAMC,cAAc,GAAG3D,UAAU,CAACuD,MAAM,CAACC,CAAC,IAAIxB,mBAAmB,CAACwB,CAAC,CAAC,KAAK,IAAI,CAAC;IAC9E,IAAIG,cAAc,CAACN,MAAM,KAAK,CAAC,EAAE,OAAO,IAAI;IAC5C,MAAMO,GAAG,GAAGD,cAAc,CAACE,MAAM,CAAC,CAACD,GAAG,EAAEJ,CAAC,KAAKI,GAAG,GAAG5B,mBAAmB,CAACwB,CAAC,CAAC,EAAE,CAAC,CAAC;IAC9E,OAAOd,IAAI,CAACQ,KAAK,CAAEU,GAAG,GAAGD,cAAc,CAACN,MAAM,GAAI,EAAE,CAAC,GAAG,EAAE;EAC5D,CAAC,EAAE,CAAC;EACJS,WAAW,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;AACtC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}