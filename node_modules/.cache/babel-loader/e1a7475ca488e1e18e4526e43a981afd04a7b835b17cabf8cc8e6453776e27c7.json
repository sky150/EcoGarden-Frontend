{"ast":null,"code":"// Mock IoT devices (e.g., M5Stack units)\nexport const mockDevices = [{\n  id: 1,\n  name: \"M5Stack Core 1\",\n  type: \"ESP32-based\",\n  macAddress: \"AA:BB:CC:DD:EE:01\",\n  mqttClientId: \"m5stack_core_1\",\n  status: \"connected\",\n  lastSeen: \"2025-08-22T10:30:00Z\",\n  wifiStrength: -45,\n  batteryLevel: null,\n  // Plugged in\n  location: \"Living Room\"\n}, {\n  id: 2,\n  name: \"M5Stack Core 2\",\n  type: \"ESP32-based\",\n  macAddress: \"AA:BB:CC:DD:EE:02\",\n  mqttClientId: \"m5stack_core_2\",\n  status: \"connected\",\n  lastSeen: \"2025-08-22T10:29:00Z\",\n  wifiStrength: -52,\n  batteryLevel: null,\n  location: \"Kitchen\"\n}, {\n  id: 3,\n  name: \"M5Stack Core 3\",\n  type: \"ESP32-based\",\n  macAddress: \"AA:BB:CC:DD:EE:03\",\n  mqttClientId: \"m5stack_core_3\",\n  status: \"offline\",\n  lastSeen: \"2025-08-21T18:45:00Z\",\n  wifiStrength: null,\n  batteryLevel: null,\n  location: \"Bedroom\"\n}];\n\n// Sensor types and their capabilities\nexport const sensorTypes = {\n  WATERING_UNIT: {\n    name: \"Watering Unit\",\n    dataFields: [\"moisture\", \"pumpStatus\", \"soilTemperature\"],\n    capabilities: [\"moisture_sensing\", \"pump_control\"],\n    shared: false // Typically dedicated to one plant\n  },\n  ENV_II: {\n    name: \"ENV II Sensor\",\n    dataFields: [\"temperature\", \"humidity\", \"pressure\"],\n    capabilities: [\"environmental_monitoring\"],\n    shared: true // Can serve multiple plants\n  },\n  LIGHT_SENSOR: {\n    name: \"Light Sensor\",\n    dataFields: [\"lightLevel\", \"uvIndex\"],\n    capabilities: [\"light_monitoring\"],\n    shared: true\n  }\n};\n\n// Mock sensors attached to devices\nexport const mockSensors = [{\n  id: 1,\n  name: \"Watering Unit 1\",\n  type: \"WATERING_UNIT\",\n  deviceId: 1,\n  mqttTopic: \"ecogarden/watering1\",\n  shared: false,\n  calibration: {\n    moistureMin: 0,\n    moistureMax: 1023,\n    moistureOffset: 0\n  },\n  status: \"active\",\n  lastReading: \"2025-08-22T10:30:00Z\",\n  location: \"Monstera Bucket\"\n}, {\n  id: 2,\n  name: \"Watering Unit 2\",\n  type: \"WATERING_UNIT\",\n  deviceId: 2,\n  mqttTopic: \"ecogarden/watering2\",\n  shared: false,\n  calibration: {\n    moistureMin: 0,\n    moistureMax: 1023,\n    moistureOffset: -15\n  },\n  status: \"active\",\n  lastReading: \"2025-08-22T10:29:00Z\",\n  location: \"Aloe Vera Bucket\"\n}, {\n  id: 3,\n  name: \"Watering Unit 3\",\n  type: \"WATERING_UNIT\",\n  deviceId: 3,\n  mqttTopic: \"ecogarden/watering3\",\n  shared: false,\n  calibration: {\n    moistureMin: 0,\n    moistureMax: 1023,\n    moistureOffset: 10\n  },\n  status: \"offline\",\n  lastReading: \"2025-08-21T18:45:00Z\",\n  location: \"Snake Plant Bucket\"\n}, {\n  id: 4,\n  name: \"ENV II Living Room\",\n  type: \"ENV_II\",\n  deviceId: 1,\n  mqttTopic: \"ecogarden/env_living_room\",\n  shared: true,\n  calibration: {\n    temperatureOffset: 0,\n    humidityOffset: 2\n  },\n  status: \"active\",\n  lastReading: \"2025-08-22T10:30:00Z\",\n  location: \"Living Room\"\n}];\n\n// Plant-Sensor relationships (many-to-many)\nexport const plantSensorAssignments = [{\n  plantId: 1,\n  // Monstera\n  sensorId: 1,\n  // Watering Unit 1\n  role: \"primary_moisture\"\n}, {\n  plantId: 1,\n  // Monstera\n  sensorId: 4,\n  // ENV II Living Room\n  role: \"environmental\"\n}, {\n  plantId: 2,\n  // Aloe Vera\n  sensorId: 2,\n  // Watering Unit 2\n  role: \"primary_moisture\"\n}, {\n  plantId: 2,\n  // Aloe Vera\n  sensorId: 4,\n  // ENV II Living Room (shared)\n  role: \"environmental\"\n}, {\n  plantId: 3,\n  // Snake Plant\n  sensorId: 3,\n  // Watering Unit 3\n  role: \"primary_moisture\"\n}, {\n  plantId: 3,\n  // Snake Plant\n  sensorId: 4,\n  // ENV II Living Room (shared)\n  role: \"environmental\"\n}, {\n  plantId: 4,\n  // Fiddle Leaf Fig\n  sensorId: 4,\n  // ENV II Living Room (shared)\n  role: \"environmental\"\n}];\n\n// Helper functions for data relationships\nexport const getSensorsForPlant = plantId => {\n  const assignments = plantSensorAssignments.filter(a => a.plantId === plantId);\n  return assignments.map(assignment => ({\n    ...mockSensors.find(s => s.id === assignment.sensorId),\n    role: assignment.role\n  }));\n};\nexport const getPlantsForSensor = sensorId => {\n  const assignments = plantSensorAssignments.filter(a => a.sensorId === sensorId);\n  return assignments.map(assignment => assignment.plantId);\n};\nexport const getDeviceForSensor = sensorId => {\n  const sensor = mockSensors.find(s => s.id === sensorId);\n  return sensor ? mockDevices.find(d => d.id === sensor.deviceId) : null;\n};\nexport const getSensorsByType = type => {\n  return mockSensors.filter(s => s.type === type);\n};\nexport const getAvailableSensors = () => {\n  return mockSensors.filter(s => s.status === 'active');\n};","map":{"version":3,"names":["mockDevices","id","name","type","macAddress","mqttClientId","status","lastSeen","wifiStrength","batteryLevel","location","sensorTypes","WATERING_UNIT","dataFields","capabilities","shared","ENV_II","LIGHT_SENSOR","mockSensors","deviceId","mqttTopic","calibration","moistureMin","moistureMax","moistureOffset","lastReading","temperatureOffset","humidityOffset","plantSensorAssignments","plantId","sensorId","role","getSensorsForPlant","assignments","filter","a","map","assignment","find","s","getPlantsForSensor","getDeviceForSensor","sensor","d","getSensorsByType","getAvailableSensors"],"sources":["/home/natalie/Dokumente/Projects/eco-garden/src/data/deviceData.js"],"sourcesContent":["// Mock IoT devices (e.g., M5Stack units)\nexport const mockDevices = [\n  {\n    id: 1,\n    name: \"M5Stack Core 1\",\n    type: \"ESP32-based\",\n    macAddress: \"AA:BB:CC:DD:EE:01\",\n    mqttClientId: \"m5stack_core_1\",\n    status: \"connected\",\n    lastSeen: \"2025-08-22T10:30:00Z\",\n    wifiStrength: -45,\n    batteryLevel: null, // Plugged in\n    location: \"Living Room\"\n  },\n  {\n    id: 2,\n    name: \"M5Stack Core 2\", \n    type: \"ESP32-based\",\n    macAddress: \"AA:BB:CC:DD:EE:02\",\n    mqttClientId: \"m5stack_core_2\",\n    status: \"connected\",\n    lastSeen: \"2025-08-22T10:29:00Z\",\n    wifiStrength: -52,\n    batteryLevel: null,\n    location: \"Kitchen\"\n  },\n  {\n    id: 3,\n    name: \"M5Stack Core 3\",\n    type: \"ESP32-based\", \n    macAddress: \"AA:BB:CC:DD:EE:03\",\n    mqttClientId: \"m5stack_core_3\",\n    status: \"offline\",\n    lastSeen: \"2025-08-21T18:45:00Z\",\n    wifiStrength: null,\n    batteryLevel: null,\n    location: \"Bedroom\"\n  }\n];\n\n// Sensor types and their capabilities\nexport const sensorTypes = {\n  WATERING_UNIT: {\n    name: \"Watering Unit\",\n    dataFields: [\"moisture\", \"pumpStatus\", \"soilTemperature\"],\n    capabilities: [\"moisture_sensing\", \"pump_control\"],\n    shared: false // Typically dedicated to one plant\n  },\n  ENV_II: {\n    name: \"ENV II Sensor\",\n    dataFields: [\"temperature\", \"humidity\", \"pressure\"],\n    capabilities: [\"environmental_monitoring\"],\n    shared: true // Can serve multiple plants\n  },\n  LIGHT_SENSOR: {\n    name: \"Light Sensor\",\n    dataFields: [\"lightLevel\", \"uvIndex\"],\n    capabilities: [\"light_monitoring\"],\n    shared: true\n  }\n};\n\n// Mock sensors attached to devices\nexport const mockSensors = [\n  {\n    id: 1,\n    name: \"Watering Unit 1\",\n    type: \"WATERING_UNIT\",\n    deviceId: 1,\n    mqttTopic: \"ecogarden/watering1\",\n    shared: false,\n    calibration: {\n      moistureMin: 0,\n      moistureMax: 1023,\n      moistureOffset: 0\n    },\n    status: \"active\",\n    lastReading: \"2025-08-22T10:30:00Z\",\n    location: \"Monstera Bucket\"\n  },\n  {\n    id: 2,\n    name: \"Watering Unit 2\", \n    type: \"WATERING_UNIT\",\n    deviceId: 2,\n    mqttTopic: \"ecogarden/watering2\",\n    shared: false,\n    calibration: {\n      moistureMin: 0,\n      moistureMax: 1023,\n      moistureOffset: -15\n    },\n    status: \"active\",\n    lastReading: \"2025-08-22T10:29:00Z\",\n    location: \"Aloe Vera Bucket\"\n  },\n  {\n    id: 3,\n    name: \"Watering Unit 3\",\n    type: \"WATERING_UNIT\", \n    deviceId: 3,\n    mqttTopic: \"ecogarden/watering3\",\n    shared: false,\n    calibration: {\n      moistureMin: 0,\n      moistureMax: 1023,\n      moistureOffset: 10\n    },\n    status: \"offline\",\n    lastReading: \"2025-08-21T18:45:00Z\",\n    location: \"Snake Plant Bucket\"\n  },\n  {\n    id: 4,\n    name: \"ENV II Living Room\",\n    type: \"ENV_II\",\n    deviceId: 1,\n    mqttTopic: \"ecogarden/env_living_room\",\n    shared: true,\n    calibration: {\n      temperatureOffset: 0,\n      humidityOffset: 2\n    },\n    status: \"active\",\n    lastReading: \"2025-08-22T10:30:00Z\",\n    location: \"Living Room\"\n  }\n];\n\n// Plant-Sensor relationships (many-to-many)\nexport const plantSensorAssignments = [\n  {\n    plantId: 1, // Monstera\n    sensorId: 1, // Watering Unit 1\n    role: \"primary_moisture\"\n  },\n  {\n    plantId: 1, // Monstera\n    sensorId: 4, // ENV II Living Room\n    role: \"environmental\"\n  },\n  {\n    plantId: 2, // Aloe Vera\n    sensorId: 2, // Watering Unit 2\n    role: \"primary_moisture\"\n  },\n  {\n    plantId: 2, // Aloe Vera\n    sensorId: 4, // ENV II Living Room (shared)\n    role: \"environmental\"\n  },\n  {\n    plantId: 3, // Snake Plant\n    sensorId: 3, // Watering Unit 3\n    role: \"primary_moisture\"\n  },\n  {\n    plantId: 3, // Snake Plant\n    sensorId: 4, // ENV II Living Room (shared)\n    role: \"environmental\"\n  },\n  {\n    plantId: 4, // Fiddle Leaf Fig\n    sensorId: 4, // ENV II Living Room (shared)\n    role: \"environmental\"\n  }\n];\n\n// Helper functions for data relationships\nexport const getSensorsForPlant = (plantId) => {\n  const assignments = plantSensorAssignments.filter(a => a.plantId === plantId);\n  return assignments.map(assignment => ({\n    ...mockSensors.find(s => s.id === assignment.sensorId),\n    role: assignment.role\n  }));\n};\n\nexport const getPlantsForSensor = (sensorId) => {\n  const assignments = plantSensorAssignments.filter(a => a.sensorId === sensorId);\n  return assignments.map(assignment => assignment.plantId);\n};\n\nexport const getDeviceForSensor = (sensorId) => {\n  const sensor = mockSensors.find(s => s.id === sensorId);\n  return sensor ? mockDevices.find(d => d.id === sensor.deviceId) : null;\n};\n\nexport const getSensorsByType = (type) => {\n  return mockSensors.filter(s => s.type === type);\n};\n\nexport const getAvailableSensors = () => {\n  return mockSensors.filter(s => s.status === 'active');\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}