{"ast":null,"code":"// Mock sensor data for plants\nexport const mockPlants = [{\n  id: 1,\n  name: \"Monstera\",\n  moisture: 45,\n  temperature: 22.3,\n  pumpStatus: false,\n  location: \"Living Room\",\n  lastWatered: \"2025-08-20T14:30:00Z\",\n  optimalMoisture: {\n    min: 40,\n    max: 70\n  }\n}, {\n  id: 2,\n  name: \"Aloe Vera\",\n  moisture: 68,\n  temperature: 24.1,\n  pumpStatus: true,\n  location: \"Kitchen\",\n  lastWatered: \"2025-08-21T08:15:00Z\",\n  optimalMoisture: {\n    min: 30,\n    max: 50\n  }\n}, {\n  id: 3,\n  name: \"Snake Plant\",\n  moisture: 32,\n  temperature: 21.8,\n  pumpStatus: false,\n  location: \"Bedroom\",\n  lastWatered: \"2025-08-19T16:45:00Z\",\n  optimalMoisture: {\n    min: 25,\n    max: 45\n  }\n}, {\n  id: 4,\n  name: \"Fiddle Leaf Fig\",\n  moisture: 55,\n  temperature: 23.5,\n  pumpStatus: false,\n  location: \"Office\",\n  lastWatered: \"2025-08-20T11:20:00Z\",\n  optimalMoisture: {\n    min: 50,\n    max: 75\n  }\n}];\n\n// Generate realistic 24-hour chart data\nexport const generateChartData = plantId => {\n  const baseData = {\n    1: {\n      baseMoisture: 45,\n      baseTemp: 22\n    },\n    // Monstera\n    2: {\n      baseMoisture: 68,\n      baseTemp: 24\n    },\n    // Aloe Vera  \n    3: {\n      baseMoisture: 32,\n      baseTemp: 21\n    },\n    // Snake Plant\n    4: {\n      baseMoisture: 55,\n      baseTemp: 23\n    } // Fiddle Leaf Fig\n  };\n  const plant = baseData[plantId] || baseData[1];\n  const data = [];\n  for (let hour = 0; hour < 24; hour++) {\n    // Simulate moisture decrease over time with some randomness\n    const moistureVariation = Math.sin(hour * 0.3) * 8 + (Math.random() - 0.5) * 6;\n    const moisture = Math.max(15, Math.min(85, plant.baseMoisture + moistureVariation - hour * 0.8));\n\n    // Simulate temperature changes throughout the day\n    const tempVariation = Math.sin((hour - 6) * 0.26) * 4 + (Math.random() - 0.5) * 2;\n    const temperature = plant.baseTemp + tempVariation;\n    data.push({\n      time: `${hour.toString().padStart(2, '0')}:00`,\n      moisture: Math.round(moisture * 10) / 10,\n      temperature: Math.round(temperature * 10) / 10,\n      hour\n    });\n  }\n  return data;\n};\n\n// System overview stats\nexport const systemStats = {\n  totalPlants: mockPlants.length,\n  plantsNeedingWater: mockPlants.filter(p => p.moisture < p.optimalMoisture.min).length,\n  activePumps: mockPlants.filter(p => p.pumpStatus).length,\n  avgTemperature: Math.round(mockPlants.reduce((sum, p) => sum + p.temperature, 0) / mockPlants.length * 10) / 10,\n  lastUpdated: new Date().toISOString()\n};","map":{"version":3,"names":["mockPlants","id","name","moisture","temperature","pumpStatus","location","lastWatered","optimalMoisture","min","max","generateChartData","plantId","baseData","baseMoisture","baseTemp","plant","data","hour","moistureVariation","Math","sin","random","tempVariation","push","time","toString","padStart","round","systemStats","totalPlants","length","plantsNeedingWater","filter","p","activePumps","avgTemperature","reduce","sum","lastUpdated","Date","toISOString"],"sources":["/home/natalie/Dokumente/Projects/eco-garden/src/data/mockData.js"],"sourcesContent":["// Mock sensor data for plants\nexport const mockPlants = [\n  {\n    id: 1,\n    name: \"Monstera\",\n    moisture: 45,\n    temperature: 22.3,\n    pumpStatus: false,\n    location: \"Living Room\",\n    lastWatered: \"2025-08-20T14:30:00Z\",\n    optimalMoisture: { min: 40, max: 70 }\n  },\n  {\n    id: 2, \n    name: \"Aloe Vera\",\n    moisture: 68,\n    temperature: 24.1,\n    pumpStatus: true,\n    location: \"Kitchen\",\n    lastWatered: \"2025-08-21T08:15:00Z\",\n    optimalMoisture: { min: 30, max: 50 }\n  },\n  {\n    id: 3,\n    name: \"Snake Plant\",\n    moisture: 32,\n    temperature: 21.8,\n    pumpStatus: false,\n    location: \"Bedroom\", \n    lastWatered: \"2025-08-19T16:45:00Z\",\n    optimalMoisture: { min: 25, max: 45 }\n  },\n  {\n    id: 4,\n    name: \"Fiddle Leaf Fig\",\n    moisture: 55,\n    temperature: 23.5,\n    pumpStatus: false,\n    location: \"Office\",\n    lastWatered: \"2025-08-20T11:20:00Z\",\n    optimalMoisture: { min: 50, max: 75 }\n  }\n];\n\n// Generate realistic 24-hour chart data\nexport const generateChartData = (plantId) => {\n  const baseData = {\n    1: { baseMoisture: 45, baseTemp: 22 }, // Monstera\n    2: { baseMoisture: 68, baseTemp: 24 }, // Aloe Vera  \n    3: { baseMoisture: 32, baseTemp: 21 }, // Snake Plant\n    4: { baseMoisture: 55, baseTemp: 23 }  // Fiddle Leaf Fig\n  };\n\n  const plant = baseData[plantId] || baseData[1];\n  const data = [];\n  \n  for (let hour = 0; hour < 24; hour++) {\n    // Simulate moisture decrease over time with some randomness\n    const moistureVariation = Math.sin(hour * 0.3) * 8 + (Math.random() - 0.5) * 6;\n    const moisture = Math.max(15, Math.min(85, plant.baseMoisture + moistureVariation - (hour * 0.8)));\n    \n    // Simulate temperature changes throughout the day\n    const tempVariation = Math.sin((hour - 6) * 0.26) * 4 + (Math.random() - 0.5) * 2;\n    const temperature = plant.baseTemp + tempVariation;\n    \n    data.push({\n      time: `${hour.toString().padStart(2, '0')}:00`,\n      moisture: Math.round(moisture * 10) / 10,\n      temperature: Math.round(temperature * 10) / 10,\n      hour\n    });\n  }\n  \n  return data;\n};\n\n// System overview stats\nexport const systemStats = {\n  totalPlants: mockPlants.length,\n  plantsNeedingWater: mockPlants.filter(p => p.moisture < p.optimalMoisture.min).length,\n  activePumps: mockPlants.filter(p => p.pumpStatus).length,\n  avgTemperature: Math.round((mockPlants.reduce((sum, p) => sum + p.temperature, 0) / mockPlants.length) * 10) / 10,\n  lastUpdated: new Date().toISOString()\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}